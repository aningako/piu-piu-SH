#!/bin/bash
#================================================{ Functions }==========================================================
get_dimensions () {
    size=($(stty size))
    endx=${size[1]}
    endy=${size[0]}
    halfendx=$[endx/2 ]
    halfendy=$[endy/2 ]
    boomendx=$[endx-10]
    bullendx=$[endx-4 ]
    heroendx=$[endx-15]
    heroendy=$[endy-8 ]
    enmyendy=$[endy-9 ]
    bossendx=$[endx-14]
    bossendy=$[endy-7 ]
    bosshbar=$[endx-10]
    lineendy=$[endy-2 ]
    Sunsendx=$[endx-18]
    hos1endy=$[endy-4 ]
    hos2endy=$[endy-11]
    hos3endy=$[endy-6 ]
    msgrendy=$[endy-10]
    tre1endy=$[endy-tree1H-2]
    tre2endy=$[endy-tree2H-2]
    tre3endy=$[endy-tree3H-2]
}

bye () { stty echo; printf "$CON$DEF"; exit $1; }
cut () { screen+="$1"; shift; printf -v spr %s "${@:$CS:$CL}"; screen+="${spr//_Z_/ }"; }
mov () {
    case $1  in -) cuter=++;; +) cuter=--;; esac
    case $SC in
        0) [[ $OX -le -$OW   ]] && return 1
           [[ $OX -gt  $endx ]] && return 1
           [[ $AS -ge  $AL   ]] && AS=0  || ((AS++)) # sprites animation
           [[ $OX -le  1     ]] && ((CS++))
           ((OX$1$1)); ((CL$cuter)); SC=$SM
           [[ $CL -lt 0 ]] && CL=0;;
        *) ((SC--));;
    esac
    [[ $OX -le 1 ]] && SX=0 || SX=$OX
}

add_enm () {
    [[ $BR -gt 0 ]] && ((BR--))
    [[ $enumber -lt $enmax && $BR -eq 0 ]] || return
    ENM+=("alien $1 $2 3 5 0 $[RANDOM%2] 1 ${3:-0} $[RANDOM%3] 3 ${#ENM[@]}")
    ((enumber++))
    BR=20
}

bonus () { # get random bonus from alien or not
    case $[RANDOM % $rnd] in
        0) ENM+=("${bonuses[$[RANDOM%${#bonuses[@]}]]} $OX $[OY-1] 3 5 0 2 1 0 0 0 ${#ENM[@]}")
    esac
}

mess () {
    XY 1 1 ${DEF}; clear
    case $1 in
        "win" ) sprite_win ; printf "${sprite[*]}"; XY 0 ${endy}; read -t3 -n1000 trash; bye 0;;
        "lose") sprite_lose; printf "${sprite[*]}"; XY 0 ${endy}; read -t3 -n1000 trash; bye 1;;
        "help") sprite_help; printf "${sprite[*]}";;
    esac
}

get_obj_data () {
    OT=${OI[0]}   # object type
    OX=${OI[1]}   # X coordinate
    OY=${OI[2]}   # Y coordinate
    OH=${OI[3]}   # object hight
    OW=${OI[4]}   # object width
    SC=${OI[5]}   # speed counter
    SM=${OI[6]}   # speed max
    CS=${OI[7]}   # cuting start
    CL=${OI[8]}   # cuting lenght
    AS=${OI[9]}   # animation start
    AL=${OI[10]}  # animation lenght
    C1=${OI[11]}  # custom obj parameter 1
    [[ $OT ]] && sprite_$OT
}

server_read () {
    read -t$spd -srn1 input &> /dev/null
    case $input in
        [wW]) [[ $H1Y    -gt 2             ]] && ((H1Y--));;
        [aA]) [[ $H1X    -gt 1             ]] && ((H1X--));;
        [sS]) [[ $H1Y    -lt $heroendy     ]] && ((H1Y++));;
        [dD]) [[ $H1X    -lt $heroendx     ]] && ((H1X++));;
        [pP]) [[ $ammo -ge $G && $C1 -eq 0 ]] && { C1=7; case $G in
            1) PIU+=("piu1 $[H1X+12] $[H1Y+3] 1 4 0 0 1 $[endx-(H1X+12)] $[RANDOM%3] 3");; # -=>

            2) PIU+=("piu1 $[H1X+12] $[H1Y+4] 1 4 0 0 1 $[endx-(H1X+12)] $[RANDOM%3] 3"    # -=>
                                                                                           #
                     "piu1 $[H1X+12] $[H1Y+2] 1 4 0 0 1 $[endx-(H1X+12)] $[RANDOM%3] 3");; # -=>

            3) PIU+=("piu1 $[H1X+12] $[H1Y+2] 1 4 0 0 1 $[endx-(H1X+12)] $[RANDOM%3] 3"    # -=>
                     "piu1 $[H1X+13] $[H1Y+3] 1 4 0 0 1 $[endx-(H1X+13)] $[RANDOM%3] 3"    #  -=>
                     "piu1 $[H1X+12] $[H1Y+4] 1 4 0 0 1 $[endx-(H1X+12)] $[RANDOM%3] 3");; # -=>

            4) PIU+=("piu1 $[H1X+12] $[H1Y+1] 1 4 0 0 1 $[endx-(H1X+12)] $[RANDOM%3] 3"    # -=>
                     "piu1 $[H1X+13] $[H1Y+2] 1 4 0 0 1 $[endx-(H1X+13)] $[RANDOM%3] 3"    #  -=>
                                                                                           #
                     "piu1 $[H1X+13] $[H1Y+4] 1 4 0 0 1 $[endx-(H1X+13)] $[RANDOM%3] 3"    #  -=>
                     "piu1 $[H1X+12] $[H1Y+5] 1 4 0 0 1 $[endx-(H1X+12)] $[RANDOM%3] 3");; # -=>

            5) PIU+=("piu1 $[H1X+12] $[H1Y+1] 1 4 0 0 1 $[endx-(H1X+12)] $[RANDOM%3] 3"    # -=>
                     "piu1 $[H1X+13] $[H1Y+2] 1 4 0 0 1 $[endx-(H1X+13)] $[RANDOM%3] 3"    #  -=>
                     "piu1 $[H1X+14] $[H1Y+3] 1 4 0 0 1 $[endx-(H1X+14)] $[RANDOM%3] 3"    #   -=>
                     "piu1 $[H1X+13] $[H1Y+4] 1 4 0 0 1 $[endx-(H1X+13)] $[RANDOM%3] 3"    #  -=>
                     "piu1 $[H1X+12] $[H1Y+5] 1 4 0 0 1 $[endx-(H1X+12)] $[RANDOM%3] 3");; # -=>
        esac; ((ammo-=$G)); };;
    esac
}

collision () {
    hero=$1 re="$2"
    [[ ${ENM[@]} =~ $re ]] && {
        match=($BASH_REMATCH)
        obj_i=${match[@]:11:1}
        obj_x=${match[@]:1:1}
        obj_y=${match[@]:2:1}
        case $match:$hero in
               boss:*) ((bhealth--))   ; boom $3   $4; return 0;;
                  *:*) unset ENM[obj_i]; boom $obj_x $obj_y;;&
              gunup:1) [[ $G  -lt 5 ]] && ((G++)) ; return 1;;
              gunup:2) [[ $G2 -lt 5 ]] && ((G2++)); return 1;;
               life:1) ((life++))    ; return 1;;
               life:2) ((life2++))   ; return 1;;
               ammo:1) ((ammo+=100)) ; return 1;;
               ammo:2) ((ammo2+=100)); return 1;;
              alien:a) ((enumber--)) ;((frags++)) ; bonus; return 0;;
              alien:b) ((enumber--)) ;((frags2++)); bonus; return 0;;
              alien:*) ((enumber--)) ; return 0;;
              bfire:*) return 0;;
        esac
    }
}

boom () {
    XB=$1 YB=$2
    [[ $XB -gt $boomendx ]] && XB=$boomendx
    BP3+=("boom $XB $YB 0 0 0 $[RANDOM%3] 1 9 0 5")
}

BOOM () {
    XB=$1 YB=$2
    [[ $XB -lt 1 ]] && XB=1
    [[ $XB -gt $boomendx ]] && XB=$boomendx
    BP3+=("boom  $XB     $YB    0 0 0 $[RANDOM%3] 1 9 0 5"
          "boom $[XB+5]  $YB    0 0 0 $[RANDOM%3] 1 9 0 5"
          "boom $[XB+1] $[YB+2] 0 0 0 $[RANDOM%3] 1 9 0 5"
          "boom $[XB+5] $[YB+2] 0 0 0 $[RANDOM%3] 1 9 0 5"
          "boom  $XB    $[YB+1] 0 0 0 $[RANDOM%3] 1 9 0 5")
}

fps_counter () {
    [[ $SECONDS -gt $sec ]] && {
        FPS=$FPSC AVG+=($FPS)
        [[ $FPSL ]] || FPSL=$FPS
        [[ $FPS -gt $FPSM  ]] && FPSM=$FPS
        [[ $FPS -lt $FPSL  ]] && FPSL=$FPS
        (( ${#AVG[@]} == 5 )) && { avg="${AVG[@]}"; FPSA=$(( (${avg// /+})/5 )); AVG=(); }
        sec=$SECONDS
        FPSC=0
    } || ((FPSC++))
    #-{ Print FPS }------------------------------------------------------------
    screen+="\e[$endy;2H${DEF}FPS:$RED$FPS ${DEF}max:$RED$FPSM ${DEF}low:$RED$FPSL ${DEF}avg:$RED$FPSA "
}

status () {
    #-{ Print game status }----------------------------------------------------
    screen+="\e[1;2H$SKY${BLK}killed aliens: $SKY$RED$frags$SKY  ${BLK}Life: $SKY$RED$life$SKY  ${BLK}Ammo: $SKY$RED$ammo$SKY "
}

fill_screen () {
    for ((i=0;         i<$lineendy; i++)); do printf "$SKY%${endx}s"; done
    for ((i=$lineendy; i<$endy;     i++)); do printf "$LND%${endx}s"; done
}

add_backgound () {
    rndy=$[2+RANDOM%10]; [[ $rndy -gt $[3+enmyendy] ]] && rndy=$[3+enmyendy]
    #-{ Add birds }------------------------------------------------------------
    case $[RANDOM % $BRD] in 0) BP1+=("bird  $endx $rndy 2 2  0 $[3+RANDOM%3] 1 0 $[RANDOM%2] 2");; esac

    #-{ Add msngr }------------------------------------------------------------
    case $[RANDOM % $MSN] in 0) BP2+=("msngr $endx $rndy 4 20 0 $[1+RANDOM%4] 1 0 $[RANDOM%3] 3");; esac

    #-{ Add clouds }-----------------------------------------------------------
    case $[RANDOM % $CLD]:$[RANDOM % 3 + 1] in
        0:1) BP1+=("cloud1 $endx $rndy 3 6  6 $[6+RANDOM%2] 1 0 0 0");;
        0:2) BP2+=("cloud2 $endx $rndy 3 8  4 $[4+RANDOM%2] 1 0 0 0");;
        0:3) BP3+=("cloud3 $endx $rndy 3 11 2 $[2+RANDOM%2] 1 0 0 0");;
    esac

    #-{ Add house }------------------------------------------------------------
    case $[RANDOM % $HOU]:$[RANDOM % 3 + 1] in
        0:1) BP1+=("house1 $endx $hos1endy 2 6  6 $[6+RANDOM%2] 1 0 0 0");;
        0:2) BP2+=("house2 $endx $hos2endy 9 30 4 $[4+RANDOM%2] 1 0 0 0");;
        0:3) BP3+=("house3 $endx $hos3endy 4 17 2 $[2+RANDOM%2] 1 0 0 0");;
    esac

    #-{ Add trees }------------------------------------------------------------
    case $[RANDOM % $TRE]:$[RANDOM % 3 + 1] in
        0:1) BP1+=("tree1 $endx $tre1endy 3 2 6 $[6+RANDOM%2] 1 0 0 0");;
        0:2) BP2+=("tree2 $endx $tre2endy 6 5 4 $[4+RANDOM%2] 1 0 0 0");;
        0:3) BP3+=("tree3 $endx $tre3endy 9 9 2 $[2+RANDOM%2] 1 0 0 0");;
    esac

    #-{ Print moving land }----------------------------------------------------
    screen+="\e[$lineendy;1H$LND${land:$[1-${LX:-1}]:$endx}"; [[ ${LX:-1} -lt -$[$LN/2] ]] && LX=-1 || ((LX--))
}
